const mongoose = require('mongoose');
require('dotenv').config();

// Import models
const Review = require('./models/ReviewSchema');
const User = require('./models/UserSchema');
const Product = require('./models/ProductSchema');
const Order = require('./models/OrderSchema');
const ProductVariant = require('./models/ProductVariantSchema');
const Address = require('./models/AddressSchema');
const PaymentMethod = require('./models/PaymentMethodSchema');

// Database connection
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/datn_database';

// Vietnamese names cho fake users
const vietnameseNames = [
  'Nguy·ªÖn VƒÉn Anh', 'Tr·∫ßn Th·ªã B√¨nh', 'L√™ Minh Ch√¢u', 'Ph·∫°m Thu Dung', 'Ho√†ng VƒÉn Em',
  'V≈© Th·ªã Ph∆∞∆°ng', 'ƒê·∫∑ng Minh Quang', 'B√πi Thu H√†', 'Ng√¥ VƒÉn Inh', 'D∆∞∆°ng Th·ªã Kim',
  'L√Ω Minh Lu√¢n', 'T·∫° Thu Mai', 'Cao VƒÉn Nam', 'ƒêinh Th·ªã Oanh', 'H·ªì Minh Ph√∫c',
  'Phan Thu Qu·ª≥nh', 'V√µ VƒÉn R·ªìng', 'Mai Th·ªã S∆∞∆°ng', 'Tr∆∞∆°ng Minh Tu·∫•n', 'L∆∞∆°ng Thu Uy√™n',
  'ƒê·ªó VƒÉn Vi·ªát', 'Chu Th·ªã Xu√¢n', 'L·∫°i Minh Y√™n', 'B·∫°ch Thu Zung', 'Ki·ªÅu VƒÉn An',
  'T·ª´ Th·ªã B·∫£o', '√îng Minh C∆∞·ªùng', 'U√¥ng Thu Di·ªáu', '·ª®ng VƒÉn ƒê·ª©c', '√Çu Th·ªã ·∫æ'
];

// Sample review data v·ªõi nhi·ªÅu variation h∆°n
const reviewTemplates = {
  5: {
    positive_adjectives: ['tuy·ªát v·ªùi', 'xu·∫•t s·∫Øc', 'ho√†n h·∫£o', 'ch·∫•t l∆∞·ª£ng cao', 'tuy·ªát ƒë·ªânh'],
    quality_comments: [
      'Ch·∫•t li·ªáu r·∫•t t·ªët, m·∫∑c l√™n tho·∫£i m√°i',
      'Form d√°ng ƒë·∫πp, ƒë√∫ng size',
      'M√†u s·∫Øc ƒë√∫ng nh∆∞ h√¨nh, kh√¥ng phai',
      'May c√¥ng ch·ªânh chu, t·ªâ m·ªâ',
      'Thi·∫øt k·∫ø ƒë·∫πp, th·ªùi trang'
    ],
    service_comments: [
      'Giao h√†ng nhanh ch√≥ng', 
      'ƒê√≥ng g√≥i c·∫©n th·∫≠n', 
      'Shop t∆∞ v·∫•n nhi·ªát t√¨nh',
      'D·ªãch v·ª• t·∫≠n t√¢m',
      'H·ªó tr·ª£ kh√°ch h√†ng t·ªët'
    ]
  },
  4: {
    positive_adjectives: ['t·ªët', 'kh√° ·ªïn', 'h√†i l√≤ng', 'ƒë√°ng gi√°'],
    minor_issues: [
      'c√≥ m·ªôt ch√∫t kh√°c so v·ªõi h√¨nh',
      'giao h√†ng h∆°i ch·∫≠m', 
      'm√†u s·∫Øc h∆°i nh·∫°t h∆°n mong ƒë·ª£i',
      'size h∆°i r·ªông m·ªôt ch√∫t'
    ]
  },
  3: {
    neutral_phrases: ['b√¨nh th∆∞·ªùng', 't·∫°m ·ªïn', 'trung b√¨nh kh√°', 'kh√¥ng t·ªá'],
    mediocre_comments: [
      'ch·∫•t l∆∞·ª£ng trung b√¨nh v·ªõi gi√° ti·ªÅn n√†y',
      'ph√π h·ª£p ƒë·ªÉ m·∫∑c h√†ng ng√†y',
      'c√≥ th·ªÉ t√¨m ƒë∆∞·ª£c t·ªët h∆°n'
    ]
  },
  2: {
    negative_adjectives: ['kh√¥ng nh∆∞ k·ª≥ v·ªçng', 'd∆∞·ªõi trung b√¨nh', 'ch∆∞a h√†i l√≤ng'],
    issues: [
      'ch·∫•t li·ªáu h∆°i k√©m',
      'may c√¥ng ch∆∞a ch·ªânh chu', 
      'm√†u s·∫Øc kh√¥ng ƒë√∫ng',
      'form d√°ng kh√¥ng ƒë·∫πp'
    ]
  },
  1: {
    very_negative: ['r·∫•t th·∫•t v·ªçng', 'qu√° t·ªá', 'kh√¥ng khuy·∫øn kh√≠ch', 'ho√†n to√†n kh√¥ng h√†i l√≤ng'],
    serious_issues: [
      's·∫£n ph·∫©m b·ªã l·ªói',
      'ch·∫•t li·ªáu r√°ch ngay',
      'kh√¥ng ƒë√∫ng v·ªõi m√¥ t·∫£',
      'd·ªãch v·ª• k√©m'
    ]
  }
};

function generateReviewComment(rating, productName) {
  const templates = reviewTemplates[rating];
  let comment = '';

  switch(rating) {
    case 5:
      const positive = templates.positive_adjectives[Math.floor(Math.random() * templates.positive_adjectives.length)];
      const quality = templates.quality_comments[Math.floor(Math.random() * templates.quality_comments.length)];
      const service = templates.service_comments[Math.floor(Math.random() * templates.service_comments.length)];
      comment = `S·∫£n ph·∫©m ${positive}! ${quality}. ${service}. R·∫•t ƒë√°ng ti·ªÅn, s·∫Ω ·ªßng h·ªô shop ti·∫øp!`;
      break;
      
    case 4:
      const positiveAdj = templates.positive_adjectives[Math.floor(Math.random() * templates.positive_adjectives.length)];
      const minorIssue = templates.minor_issues[Math.floor(Math.random() * templates.minor_issues.length)];
      comment = `S·∫£n ph·∫©m ${positiveAdj}, ch·∫•t l∆∞·ª£ng ·ªïn. Ch·ªâ c√≥ ƒëi·ªÅu ${minorIssue}. Nh√¨n chung v·∫´n h√†i l√≤ng.`;
      break;
      
    case 3:
      const neutral = templates.neutral_phrases[Math.floor(Math.random() * templates.neutral_phrases.length)];
      const mediocre = templates.mediocre_comments[Math.floor(Math.random() * templates.mediocre_comments.length)];
      comment = `S·∫£n ph·∫©m ${neutral}, ${mediocre}. C√≥ th·ªÉ c√¢n nh·∫Øc n·∫øu kh√¥ng c√≥ l·ª±a ch·ªçn kh√°c.`;
      break;
      
    case 2:
      const negative = templates.negative_adjectives[Math.floor(Math.random() * templates.negative_adjectives.length)];
      const issue = templates.issues[Math.floor(Math.random() * templates.issues.length)];
      comment = `S·∫£n ph·∫©m ${negative}. V·∫•n ƒë·ªÅ ch√≠nh l√† ${issue}. C·∫ßn c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng th√™m.`;
      break;
      
    case 1:
      const veryNegative = templates.very_negative[Math.floor(Math.random() * templates.very_negative.length)];
      const seriousIssue = templates.serious_issues[Math.floor(Math.random() * templates.serious_issues.length)];
      comment = `${veryNegative}! S·∫£n ph·∫©m ${seriousIssue}. Kh√¥ng ƒë√°ng ti·ªÅn b·ªè ra, kh√¥ng khuy·∫øn kh√≠ch mua!`;
      break;
  }

  return comment;
}

async function createSampleUsersIfNeeded() {
  const userCount = await User.countDocuments({ role: 'customer' });
  
  if (userCount < 20) {
    console.log('üë• Creating sample users...');
    const usersToCreate = [];
    
    for (let i = 0; i < Math.min(30, vietnameseNames.length); i++) {
      const name = vietnameseNames[i];
      const email = `user${i + 1}@example.com`;
      const phone = `09${Math.floor(10000000 + Math.random() * 90000000)}`;
      
      usersToCreate.push({
        email,
        password: 'password123', // Will be hashed by pre-save middleware
        name,
        phone,
        address: 'ƒê·ªãa ch·ªâ m·∫´u',
        role: 'customer',
        isActive: true
      });
    }
    
    await User.insertMany(usersToCreate);
    console.log(`‚úÖ Created ${usersToCreate.length} sample users`);
  }
}

async function createSampleOrdersIfNeeded() {
  const orderCount = await Order.countDocuments({ status: 'delivered' });
  
  if (orderCount < 10) {
    console.log('üì¶ Creating sample delivered orders...');
    
    const customers = await User.find({ role: 'customer' }).limit(20);
    const products = await Product.find({ isActive: true }).limit(10);
    const productVariants = await ProductVariant.find({}).limit(20);
    const addresses = await Address.find({}).limit(10);
    const paymentMethods = await PaymentMethod.find({}).limit(3);
    
    if (productVariants.length === 0 || addresses.length === 0 || paymentMethods.length === 0) {
      console.log('‚ö†Ô∏è Missing required data for orders (variants/addresses/payment methods)');
      return;
    }

    const ordersToCreate = [];
    
    for (let i = 0; i < 15; i++) {
      const customer = customers[Math.floor(Math.random() * customers.length)];
      const orderCode = `DH${Date.now()}${i}`;
      
      // Random 1-3 items per order
      const itemCount = Math.floor(Math.random() * 3) + 1;
      const items = [];
      let total = 0;
      
      for (let j = 0; j < itemCount; j++) {
        const variant = productVariants[Math.floor(Math.random() * productVariants.length)];
        const quantity = Math.floor(Math.random() * 3) + 1;
        const price = Math.floor(Math.random() * 500000) + 100000; // 100k-600k
        const itemTotal = price * quantity;
        
        items.push({
          productVariant: variant._id,
          quantity,
          price,
          totalPrice: itemTotal
        });
        
        total += itemTotal;
      }
      
      const shippingFee = 30000;
      const finalTotal = total + shippingFee;
      
      // Random date trong 6 th√°ng qua
      const orderDate = new Date(Date.now() - Math.random() * 180 * 24 * 60 * 60 * 1000);
      
      ordersToCreate.push({
        orderCode,
        user: customer._id,
        items,
        address: addresses[Math.floor(Math.random() * addresses.length)]._id,
        total,
        shippingFee,
        finalTotal,
        status: 'delivered',
        paymentMethod: paymentMethods[Math.floor(Math.random() * paymentMethods.length)]._id,
        paymentStatus: 'paid',
        createdAt: orderDate,
        updatedAt: new Date(orderDate.getTime() + 24 * 60 * 60 * 1000) // delivered next day
      });
    }
    
    await Order.insertMany(ordersToCreate);
    console.log(`‚úÖ Created ${ordersToCreate.length} sample orders`);
  }
}

async function advancedSeedReviews() {
  try {
    console.log('üîå Connecting to MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // Create sample data if needed
    await createSampleUsersIfNeeded();
    await createSampleOrdersIfNeeded();

    // Fetch data
    const customers = await User.find({ role: 'customer', isActive: true });
    const products = await Product.find({ isActive: true });
    const deliveredOrders = await Order.find({ 
      status: 'delivered' 
    }).populate({
      path: 'items.productVariant',
      populate: {
        path: 'product'
      }
    }).populate('user');

    console.log(`üë• ${customers.length} customers found`);
    console.log(`üì¶ ${products.length} products found`);
    console.log(`üöö ${deliveredOrders.length} delivered orders found`);

    // Clear existing reviews
    await Review.deleteMany({});
    console.log('üóëÔ∏è Cleared existing reviews');

    const reviewsToCreate = [];

    // Create reviews for delivered orders
    for (const order of deliveredOrders) {
      const reviewCount = Math.floor(Math.random() * order.items.length) + 1; // 1 to all items
      const itemsToReview = order.items
        .filter(item => item.productVariant && item.productVariant.product)
        .slice(0, reviewCount);

      for (const item of itemsToReview) {
        // Rating distribution: 60% high (4-5), 25% medium (3), 15% low (1-2)
        const ratingRand = Math.random();
        let rating;
        if (ratingRand < 0.35) rating = 5;
        else if (ratingRand < 0.60) rating = 4;
        else if (ratingRand < 0.85) rating = 3;
        else if (ratingRand < 0.95) rating = 2;
        else rating = 1;

        const productName = item.productVariant.product.name;
        const comment = generateReviewComment(rating, productName);

        // Review date: 1-30 days after order date
        const reviewDate = new Date(
          order.createdAt.getTime() + 
          (Math.random() * 30 + 1) * 24 * 60 * 60 * 1000
        );

        reviewsToCreate.push({
          product: item.productVariant.product._id,
          user: order.user._id,
          order: order._id,
          rating,
          comment,
          createdAt: reviewDate,
          updatedAt: reviewDate
        });
      }
    }

    // Remove duplicates
    const uniqueReviews = [];
    const seen = new Set();
    
    for (const review of reviewsToCreate) {
      const key = `${review.user}-${review.product}-${review.order}`;
      if (!seen.has(key)) {
        seen.add(key);
        uniqueReviews.push(review);
      }
    }

    // Insert reviews
    console.log(`üìù Creating ${uniqueReviews.length} reviews...`);
    await Review.insertMany(uniqueReviews);

    // Statistics
    const stats = await Review.aggregate([
      {
        $group: {
          _id: '$rating',
          count: { $sum: 1 }
        }
      },
      { $sort: { _id: 1 } }
    ]);

    const totalReviews = await Review.countDocuments();
    
    console.log('\nüìä REVIEW STATISTICS:');
    console.log(`üìù Total reviews: ${totalReviews}`);
    stats.forEach(stat => {
      const percentage = ((stat.count / totalReviews) * 100).toFixed(1);
      console.log(`‚≠ê ${stat._id} stars: ${stat.count} (${percentage}%)`);
    });

    // Sample reviews
    console.log('\nüìã SAMPLE REVIEWS:');
    const samples = await Review.find()
      .populate('product', 'name')
      .populate('user', 'name')
      .populate('order', 'orderCode')
      .limit(3);

    samples.forEach((review, i) => {
      console.log(`\n${i + 1}. üì¶ ${review.product.name}`);
      console.log(`   üë§ ${review.user.name}`);
      console.log(`   üè∑Ô∏è ${review.order.orderCode}`);
      console.log(`   ‚≠ê ${review.rating}/5`);
      console.log(`   üí¨ ${review.comment}`);
    });

    console.log('\nüéâ Advanced review seeding completed!');

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected');
  }
}

// Run the advanced seeding
console.log('üå± Starting advanced review seeding...');
advancedSeedReviews();
