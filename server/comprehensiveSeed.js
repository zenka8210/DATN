const mongoose = require('mongoose');
require('dotenv').config();

// Import models
const Category = require('./models/CategorySchema');
const Product = require('./models/ProductSchema');
const ProductVariant = require('./models/ProductVariantSchema');
const User = require('./models/UserSchema');
const Order = require('./models/OrderSchema');
const Review = require('./models/ReviewSchema');
const Address = require('./models/AddressSchema');
const PaymentMethod = require('./models/PaymentMethodSchema');
const Color = require('./models/ColorSchema');
const Size = require('./models/SizeSchema');

// Database connection
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/datn_database';

// Sample data
const categories = [
  { name: '√Åo Nam', description: 'T·∫•t c·∫£ c√°c lo·∫°i √°o d√†nh cho nam gi·ªõi' },
  { name: '√Åo N·ªØ', description: 'T·∫•t c·∫£ c√°c lo·∫°i √°o d√†nh cho n·ªØ gi·ªõi' },
  { name: 'Qu·∫ßn Nam', description: 'Qu·∫ßn √°o nam ƒëa d·∫°ng phong c√°ch' },
  { name: 'Qu·∫ßn N·ªØ', description: 'Qu·∫ßn √°o n·ªØ th·ªùi trang' },
  { name: 'Gi√†y D√©p', description: 'Gi√†y d√©p nam n·ªØ c√°c lo·∫°i' },
  { name: 'Ph·ª• Ki·ªán', description: 'Ph·ª• ki·ªán th·ªùi trang ƒëa d·∫°ng' }
];

const colors = [
  { name: 'ƒêen', hex: '#000000' },
  { name: 'Tr·∫Øng', hex: '#FFFFFF' },
  { name: 'X√°m', hex: '#808080' },
  { name: 'ƒê·ªè', hex: '#FF0000' },
  { name: 'Xanh Navy', hex: '#000080' },
  { name: 'Xanh D∆∞∆°ng', hex: '#0000FF' },
  { name: 'N√¢u', hex: '#8B4513' },
  { name: 'H·ªìng', hex: '#FFC0CB' }
];

const sizes = [
  { name: 'XS', description: 'Extra Small' },
  { name: 'S', description: 'Small' },
  { name: 'M', description: 'Medium' },
  { name: 'L', description: 'Large' },
  { name: 'XL', description: 'Extra Large' },
  { name: 'XXL', description: 'Double Extra Large' }
];

const products = [
  {
    name: '√Åo Thun Basic Nam',
    price: 299000,
    description: '√Åo thun cotton cao c·∫•p, form regular fit, ph√π h·ª£p m·ªçi d√°ng ng∆∞·ªùi',
    category: '√Åo Nam',
    images: ['/images/ao-thun-nam-1.jpg', '/images/ao-thun-nam-2.jpg'],
    salePrice: 249000,
    isActive: true
  },
  {
    name: '√Åo S∆° Mi C√¥ng S·ªü Nam',
    price: 499000,
    description: '√Åo s∆° mi c√¥ng s·ªü sang tr·ªçng, ch·∫•t li·ªáu cotton pha, ch·ªëng nhƒÉn',
    category: '√Åo Nam',
    images: ['/images/ao-so-mi-nam-1.jpg'],
    isActive: true
  },
  {
    name: 'V√°y Maxi N·ªØ',
    price: 599000,
    description: 'V√°y maxi d√°ng d√†i thanh l·ªãch, ch·∫•t li·ªáu voan m·ªÅm m·∫°i',
    category: '√Åo N·ªØ',
    images: ['/images/vay-maxi-1.jpg', '/images/vay-maxi-2.jpg'],
    salePrice: 479000,
    isActive: true
  },
  {
    name: 'Qu·∫ßn Jean Nam Slim Fit',
    price: 699000,
    description: 'Qu·∫ßn jean nam d√°ng slim fit th·ªùi trang, ch·∫•t li·ªáu denim cao c·∫•p',
    category: 'Qu·∫ßn Nam',
    images: ['/images/quan-jean-nam-1.jpg'],
    isActive: true
  },
  {
    name: 'Ch√¢n V√°y Ng·∫Øn N·ªØ',
    price: 399000,
    description: 'Ch√¢n v√°y ng·∫Øn phong c√°ch tr·∫ª trung, ch·∫•t li·ªáu cotton tho√°ng m√°t',
    category: 'Qu·∫ßn N·ªØ',
    images: ['/images/chan-vay-ngan-1.jpg'],
    salePrice: 319000,
    isActive: true
  },
  {
    name: 'Gi√†y Sneaker Unisex',
    price: 1299000,
    description: 'Gi√†y sneaker phong c√°ch th·ªÉ thao, ƒë·∫ø cao su √™m √°i',
    category: 'Gi√†y D√©p',
    images: ['/images/giay-sneaker-1.jpg', '/images/giay-sneaker-2.jpg'],
    isActive: true
  },
  {
    name: 'T√∫i X√°ch N·ªØ',
    price: 899000,
    description: 'T√∫i x√°ch n·ªØ cao c·∫•p, ch·∫•t li·ªáu da PU sang tr·ªçng',
    category: 'Ph·ª• Ki·ªán',
    images: ['/images/tui-xach-nu-1.jpg'],
    salePrice: 699000,
    isActive: true
  },
  {
    name: '√Åo Kho√°c Hoodie',
    price: 599000,
    description: '√Åo kho√°c hoodie ·∫•m √°p, ph√π h·ª£p m√πa ƒë√¥ng',
    category: '√Åo Nam',
    images: ['/images/ao-hoodie-1.jpg'],
    isActive: true
  }
];

const paymentMethods = [
  { method: 'COD', isActive: true },
  { method: 'VNPay', isActive: true }
];

// Vietnamese review templates (from previous file)
const reviewTemplates = {
  5: [
    'S·∫£n ph·∫©m tuy·ªát v·ªùi! Ch·∫•t li·ªáu r·∫•t t·ªët, m·∫∑c l√™n tho·∫£i m√°i. Giao h√†ng nhanh ch√≥ng. R·∫•t ƒë√°ng ti·ªÅn, s·∫Ω ·ªßng h·ªô shop ti·∫øp!',
    'Ch·∫•t l∆∞·ª£ng xu·∫•t s·∫Øc! Form d√°ng ƒë·∫πp, ƒë√∫ng size. ƒê√≥ng g√≥i c·∫©n th·∫≠n. R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y.',
    'Ho√†n h·∫£o! M√†u s·∫Øc ƒë√∫ng nh∆∞ h√¨nh, kh√¥ng phai. Shop t∆∞ v·∫•n nhi·ªát t√¨nh. S·∫Ω ti·∫øp t·ª•c ·ªßng h·ªô!',
  ],
  4: [
    'S·∫£n ph·∫©m t·ªët, ch·∫•t l∆∞·ª£ng ·ªïn. Ch·ªâ c√≥ ƒëi·ªÅu giao h√†ng h∆°i ch·∫≠m. Nh√¨n chung v·∫´n h√†i l√≤ng.',
    'Kh√° ·ªïn, ch·∫•t l∆∞·ª£ng ƒë√°ng gi√° v·ªõi gi√° ti·ªÅn. May c√¥ng ch·ªânh chu. C√≥ m·ªôt ch√∫t kh√°c so v·ªõi h√¨nh.',
    'H√†i l√≤ng v·ªõi s·∫£n ph·∫©m. Thi·∫øt k·∫ø ƒë·∫πp, m√†u s·∫Øc h∆°i nh·∫°t h∆°n mong ƒë·ª£i. Size h∆°i r·ªông m·ªôt ch√∫t.',
  ],
  3: [
    'S·∫£n ph·∫©m b√¨nh th∆∞·ªùng, ch·∫•t l∆∞·ª£ng trung b√¨nh v·ªõi gi√° ti·ªÅn n√†y. C√≥ th·ªÉ c√¢n nh·∫Øc n·∫øu kh√¥ng c√≥ l·ª±a ch·ªçn kh√°c.',
    'T·∫°m ·ªïn, ph√π h·ª£p ƒë·ªÉ m·∫∑c h√†ng ng√†y. C√≥ th·ªÉ t√¨m ƒë∆∞·ª£c t·ªët h∆°n nh∆∞ng c≈©ng kh√¥ng t·ªá.',
    'Trung b√¨nh kh√°, ch·∫•t l∆∞·ª£ng nh∆∞ mong ƒë·ª£i. Form d√°ng ·ªïn, ch·ªâ c·∫ßn c·∫£i thi·ªán m·ªôt ch√∫t.',
  ],
  2: [
    'S·∫£n ph·∫©m kh√¥ng nh∆∞ k·ª≥ v·ªçng. V·∫•n ƒë·ªÅ ch√≠nh l√† ch·∫•t li·ªáu h∆°i k√©m. C·∫ßn c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng th√™m.',
    'D∆∞·ªõi trung b√¨nh, may c√¥ng ch∆∞a ch·ªânh chu. M√†u s·∫Øc kh√¥ng ƒë√∫ng v·ªõi m√¥ t·∫£ tr√™n web.',
    'Ch∆∞a h√†i l√≤ng l·∫Øm, form d√°ng kh√¥ng ƒë·∫πp. Gi√° ti·ªÅn so v·ªõi ch·∫•t l∆∞·ª£ng ch∆∞a t∆∞∆°ng x·ª©ng.',
  ],
  1: [
    'R·∫•t th·∫•t v·ªçng! S·∫£n ph·∫©m b·ªã l·ªói ngay khi nh·∫≠n. Kh√¥ng ƒë√°ng ti·ªÅn b·ªè ra, kh√¥ng khuy·∫øn kh√≠ch mua!',
    'Qu√° t·ªá! Ch·∫•t li·ªáu r√°ch ngay, kh√¥ng ƒë√∫ng v·ªõi m√¥ t·∫£. D·ªãch v·ª• k√©m, giao h√†ng ch·∫≠m.',
    'Ho√†n to√†n kh√¥ng h√†i l√≤ng! S·∫£n ph·∫©m kh√¥ng nh∆∞ qu·∫£ng c√°o. Ch·∫•t l∆∞·ª£ng k√©m, kh√¥ng ƒë√°ng mua.',
  ]
};

async function comprehensiveSeedData() {
  try {
    console.log('üîå Connecting to MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // Clear existing data (optional)
    // await Category.deleteMany({});
    // await Product.deleteMany({});
    // await ProductVariant.deleteMany({});
    // await Color.deleteMany({});
    // await Size.deleteMany({});
    // await PaymentMethod.deleteMany({});
    
    // 1. Create Categories
    console.log('üìÇ Creating categories...');
    const categoryDocs = await Category.insertMany(categories);
    console.log(`‚úÖ Created ${categoryDocs.length} categories`);

    // 2. Create Colors
    console.log('üé® Creating colors...');
    const colorDocs = await Color.insertMany(colors);
    console.log(`‚úÖ Created ${colorDocs.length} colors`);

    // 3. Create Sizes
    console.log('üìè Creating sizes...');
    const sizeDocs = await Size.insertMany(sizes);
    console.log(`‚úÖ Created ${sizeDocs.length} sizes`);

    // 4. Create Payment Methods
    console.log('üí≥ Creating payment methods...');
    const paymentDocs = await PaymentMethod.insertMany(paymentMethods);
    console.log(`‚úÖ Created ${paymentDocs.length} payment methods`);

    // 5. Create Products
    console.log('üì¶ Creating products...');
    const productDocs = [];
    for (const product of products) {
      // Find category by name
      const category = categoryDocs.find(cat => cat.name === product.category);
      if (category) {
        const productDoc = { 
          ...product, 
          category: category._id 
        };
        
        // Set sale dates for products with sale prices
        if (productDoc.salePrice) {
          productDoc.saleStartDate = new Date();
          productDoc.saleEndDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days from now
        }
        
        productDocs.push(productDoc);
      } else {
        console.log(`‚ö†Ô∏è Category not found for product: ${product.name}`);
      }
    }
    
    const createdProducts = await Product.insertMany(productDocs);
    console.log(`‚úÖ Created ${createdProducts.length} products`);

    // 6. Create Product Variants
    console.log('üîÑ Creating product variants...');
    const variantDocs = [];
    
    for (const product of createdProducts) {
      // Create 2-4 variants per product
      const variantCount = Math.floor(Math.random() * 3) + 2;
      
      for (let i = 0; i < variantCount; i++) {
        const randomColor = colorDocs[Math.floor(Math.random() * colorDocs.length)];
        const randomSize = sizeDocs[Math.floor(Math.random() * sizeDocs.length)];
        
        // Price can vary ¬±10% from product price
        const priceVariation = (Math.random() - 0.5) * 0.2; // -10% to +10%
        const variantPrice = Math.round(product.price * (1 + priceVariation));
        
        variantDocs.push({
          product: product._id,
          color: randomColor._id,
          size: randomSize._id,
          price: variantPrice,
          stock: Math.floor(Math.random() * 100) + 10, // 10-110 stock
          sku: `${product.name.substring(0, 3).toUpperCase()}-${randomColor.name.substring(0, 2)}-${randomSize.name}-${Date.now()}-${i}`,
          isActive: true
        });
      }
    }
    
    const createdVariants = await ProductVariant.insertMany(variantDocs);
    console.log(`‚úÖ Created ${createdVariants.length} product variants`);

    // 7. Create sample addresses for existing users
    console.log('üè† Creating addresses...');
    const users = await User.find({ role: 'customer' }).limit(20);
    const addressDocs = [];
    
    const sampleAddresses = [
      {
        addressLine: 'S·ªë 123, ƒê∆∞·ªùng Nguy·ªÖn VƒÉn C·ª´',
        ward: 'Ph∆∞·ªùng 4',
        district: 'Qu·∫≠n 5',
        city: 'TP. H·ªì Ch√≠ Minh'
      },
      {
        addressLine: 'S·ªë 456, ƒê∆∞·ªùng L√™ L·ª£i',
        ward: 'Ph∆∞·ªùng B·∫øn Th√†nh',
        district: 'Qu·∫≠n 1',
        city: 'TP. H·ªì Ch√≠ Minh'
      },
      {
        addressLine: 'S·ªë 789, ƒê∆∞·ªùng Tr·∫ßn H∆∞ng ƒê·∫°o',
        ward: 'Ph∆∞·ªùng 2',
        district: 'Qu·∫≠n 3',
        city: 'TP. H·ªì Ch√≠ Minh'
      },
      {
        addressLine: 'S·ªë 321, ƒê∆∞·ªùng Hai B√† Tr∆∞ng',
        ward: 'Ph∆∞·ªùng ƒêa Kao',
        district: 'Qu·∫≠n 1',
        city: 'TP. H·ªì Ch√≠ Minh'
      },
      {
        addressLine: 'S·ªë 654, ƒê∆∞·ªùng V√µ VƒÉn T·∫ßn',
        ward: 'Ph∆∞·ªùng 6',
        district: 'Qu·∫≠n 3',
        city: 'TP. H·ªì Ch√≠ Minh'
      }
    ];
    
    for (const user of users) {
      const randomAddress = sampleAddresses[Math.floor(Math.random() * sampleAddresses.length)];
      addressDocs.push({
        user: user._id,
        fullName: user.name,
        phone: user.phone || '0901234567',
        addressLine: randomAddress.addressLine,
        ward: randomAddress.ward,
        district: randomAddress.district,
        city: randomAddress.city,
        isDefault: true
      });
    }
    
    const createdAddresses = await Address.insertMany(addressDocs);
    console.log(`‚úÖ Created ${createdAddresses.length} addresses`);

    // 8. Create Orders
    console.log('üõí Creating orders...');
    const orderDocs = [];
    
    for (let i = 0; i < 20; i++) {
      const randomUser = users[Math.floor(Math.random() * users.length)];
      const userAddress = createdAddresses.find(addr => addr.user.toString() === randomUser._id.toString());
      const randomPayment = paymentDocs[Math.floor(Math.random() * paymentDocs.length)];
      
      // Random 1-3 items per order
      const itemCount = Math.floor(Math.random() * 3) + 1;
      const items = [];
      let total = 0;
      
      for (let j = 0; j < itemCount; j++) {
        const randomVariant = createdVariants[Math.floor(Math.random() * createdVariants.length)];
        const quantity = Math.floor(Math.random() * 3) + 1;
        
        // Find the product to get price
        const productForVariant = createdProducts.find(p => p._id.toString() === randomVariant.product.toString());
        const price = productForVariant.salePrice && productForVariant.saleStartDate && productForVariant.saleEndDate
          ? productForVariant.salePrice 
          : productForVariant.price;
        
        const itemTotal = price * quantity;
        
        items.push({
          productVariant: randomVariant._id,
          quantity,
          price,
          totalPrice: itemTotal
        });
        
        total += itemTotal;
      }
      
      const shippingFee = 30000;
      const finalTotal = total + shippingFee;
      
      // Random order date in last 3 months
      const orderDate = new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000);
      
      // 70% delivered, 30% other statuses
      const statuses = ['pending', 'confirmed', 'shipping', 'delivered', 'cancelled'];
      const status = Math.random() < 0.7 ? 'delivered' : statuses[Math.floor(Math.random() * statuses.length)];
      
      orderDocs.push({
        orderCode: `FINO${Date.now()}${i}`,
        user: randomUser._id,
        items,
        address: userAddress._id,
        total,
        shippingFee,
        finalTotal,
        status,
        paymentMethod: randomPayment._id,
        paymentStatus: status === 'delivered' ? 'paid' : 'pending',
        createdAt: orderDate,
        updatedAt: status === 'delivered' 
          ? new Date(orderDate.getTime() + 3 * 24 * 60 * 60 * 1000) 
          : orderDate
      });
    }
    
    const createdOrders = await Order.insertMany(orderDocs);
    console.log(`‚úÖ Created ${createdOrders.length} orders`);

    // 9. Create Reviews for delivered orders
    console.log('‚≠ê Creating reviews...');
    const deliveredOrders = createdOrders.filter(order => order.status === 'delivered');
    const reviewDocs = [];
    
    for (const order of deliveredOrders) {
      // 60% chance to have reviews
      if (Math.random() < 0.6) {
        const itemCount = Math.min(order.items.length, Math.floor(Math.random() * order.items.length) + 1);
        
        for (let i = 0; i < itemCount; i++) {
          const item = order.items[i];
          
          // Rating distribution: 50% 5-star, 30% 4-star, 15% 3-star, 5% 1-2 star
          const ratingRand = Math.random();
          let rating;
          if (ratingRand < 0.5) rating = 5;
          else if (ratingRand < 0.8) rating = 4;
          else if (ratingRand < 0.95) rating = 3;
          else rating = Math.floor(Math.random() * 2) + 1; // 1 or 2
          
          const comments = reviewTemplates[rating];
          const comment = comments[Math.floor(Math.random() * comments.length)];
          
          // Review date: 1-14 days after order date
          const reviewDate = new Date(
            order.createdAt.getTime() + 
            (Math.random() * 14 + 1) * 24 * 60 * 60 * 1000
          );
          
          // Get product from variant
          const variant = createdVariants.find(v => v._id.toString() === item.productVariant.toString());
          if (variant) {
            reviewDocs.push({
              product: variant.product,
              user: order.user,
              order: order._id,
              rating,
              comment,
              createdAt: reviewDate,
              updatedAt: reviewDate
            });
          }
        }
      }
    }
    
    const createdReviews = await Review.insertMany(reviewDocs);
    console.log(`‚úÖ Created ${createdReviews.length} reviews`);

    // Final Statistics
    console.log('\nüìä COMPREHENSIVE SEEDING COMPLETED!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`üìÇ Categories: ${categoryDocs.length}`);
    console.log(`üé® Colors: ${colorDocs.length}`);
    console.log(`üìè Sizes: ${sizeDocs.length}`);
    console.log(`üí≥ Payment Methods: ${paymentDocs.length}`);
    console.log(`üì¶ Products: ${createdProducts.length}`);
    console.log(`üîÑ Product Variants: ${createdVariants.length}`);
    console.log(`üè† Addresses: ${createdAddresses.length}`);
    console.log(`üõí Orders: ${createdOrders.length}`);
    console.log(`‚≠ê Reviews: ${createdReviews.length}`);
    
    // Review statistics
    const reviewStats = await Review.aggregate([
      { $group: { _id: '$rating', count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);
    
    console.log('\n‚≠ê REVIEW BREAKDOWN:');
    reviewStats.forEach(stat => {
      const percentage = ((stat.count / createdReviews.length) * 100).toFixed(1);
      console.log(`   ${stat._id} ‚≠ê: ${stat.count} reviews (${percentage}%)`);
    });

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Disconnected from MongoDB');
  }
}

// Run comprehensive seeding
console.log('üå± Starting comprehensive database seeding...');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
comprehensiveSeedData();
