import { NextResponse } from "next/server";

interface ChatRequest {
  message: string;
  context?: string[];
}

const productInfo = {
  categories: [
    { name: "√Åo thun nam", priceRange: "100,000 - 300,000 VNƒê" },
    { name: "√Åo thun n·ªØ", priceRange: "120,000 - 350,000 VNƒê" },
    { name: "Ph·ª• ki·ªán", priceRange: "50,000 - 200,000 VNƒê" },
    { name: "Set qu·∫ßn √°o", priceRange: "250,000 - 500,000 VNƒê" }
  ],
  policies: {
    shipping: "Giao h√†ng ti·∫øt ki·ªám: 20,000 VNƒê (2-3 ng√†y), Giao h√†ng nhanh: 50,000 VNƒê (1-2 ng√†y)",
    payment: "COD, Chuy·ªÉn kho·∫£n, Momo, Th·∫ª t√≠n d·ª•ng",
    return: "ƒê·ªïi tr·∫£ trong 7 ng√†y, s·∫£n ph·∫©m ch∆∞a s·ª≠ d·ª•ng, c√≤n nguy√™n tag",
    warranty: "B·∫£o h√†nh ch·∫•t l∆∞·ª£ng trong 30 ng√†y"
  },
  discounts: [
    { code: "SAVE10", description: "Gi·∫£m 10% ƒë∆°n h√†ng", minOrder: 200000 },
    { code: "SAVE50", description: "Gi·∫£m 50,000ƒë", minOrder: 300000 },
    { code: "FREESHIP", description: "Mi·ªÖn ph√≠ ship", minOrder: 150000 }
  ]
};

const generateSmartResponse = (message: string, context: string[] = []): string => {
  const msg = message.toLowerCase();
  
  // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ gi√° c·∫£
  if (msg.includes("gi√°") || msg.includes("bao nhi√™u") || msg.includes("cost")) {
    if (msg.includes("√°o thun nam")) {
      return `√Åo thun nam c√≥ gi√° t·ª´ 100,000 - 300,000 VNƒê t√πy theo ch·∫•t li·ªáu v√† thi·∫øt k·∫ø. C√°c s·∫£n ph·∫©m hot nh·∫•t hi·ªán t·∫°i:\n‚Ä¢ √Åo thun nam basic: 100,000 VNƒê\n‚Ä¢ √Åo thun nam premium: 200,000 - 300,000 VNƒê\n\nB·∫°n c√≥ mu·ªën xem catalog s·∫£n ph·∫©m kh√¥ng?`;
    }
    if (msg.includes("√°o thun n·ªØ") || msg.includes("n·ªØ")) {
      return `√Åo thun n·ªØ c√≥ gi√° t·ª´ 120,000 - 350,000 VNƒê:\n‚Ä¢ √Åo thun n·ªØ basic: 120,000 VNƒê\n‚Ä¢ √Åo thun n·ªØ trendy: 200,000 - 350,000 VNƒê\n\nT·∫•t c·∫£ ƒë·ªÅu c√≥ size t·ª´ S ƒë·∫øn XL nh√©!`;
    }
    return `Gi√° s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i r·∫•t h·ª£p l√Ω:\n${productInfo.categories.map(cat => `‚Ä¢ ${cat.name}: ${cat.priceRange}`).join('\n')}\n\nB·∫°n quan t√¢m ƒë·∫øn lo·∫°i s·∫£n ph·∫©m n√†o?`;
  }

  // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ size
  if (msg.includes("size") || msg.includes("k√≠ch th∆∞·ªõc") || msg.includes("measure")) {
    return `Ch√∫ng t√¥i c√≥ ƒë·∫ßy ƒë·ªß size t·ª´ S ƒë·∫øn XXL:\n‚Ä¢ Size S: 45-50kg, ng·ª±c 84-88cm\n‚Ä¢ Size M: 50-55kg, ng·ª±c 88-92cm\n‚Ä¢ Size L: 55-65kg, ng·ª±c 92-96cm\n‚Ä¢ Size XL: 65-75kg, ng·ª±c 96-102cm\n‚Ä¢ Size XXL: 75-85kg, ng·ª±c 102-108cm\n\nB·∫°n c·∫ßn t∆∞ v·∫•n size c·ª• th·ªÉ kh√¥ng?`;
  }

  // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ch·∫•t li·ªáu
  if (msg.includes("ch·∫•t li·ªáu") || msg.includes("v·∫£i") || msg.includes("material")) {
    return `S·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i s·ª≠ d·ª•ng ch·∫•t li·ªáu cao c·∫•p:\n‚Ä¢ Cotton 100% m·ªÅm m·∫°i, th·∫•m h√∫t m·ªì h√¥i t·ªët\n‚Ä¢ Cotton pha Polyester b·ªÅn ƒë·∫πp, kh√¥ng nhƒÉn\n‚Ä¢ Bamboo fiber th√¢n thi·ªán m√¥i tr∆∞·ªùng\n‚Ä¢ Modal m·ªÅm m·∫°i nh∆∞ l·ª•a\n\nT·∫•t c·∫£ ƒë·ªÅu ƒë∆∞·ª£c ki·ªÉm tra ch·∫•t l∆∞·ª£ng nghi√™m ng·∫∑t!`;
  }

  // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ m√†u s·∫Øc
  if (msg.includes("m√†u") || msg.includes("color")) {
    return `Ch√∫ng t√¥i c√≥ ƒëa d·∫°ng m√†u s·∫Øc:\n‚Ä¢ M√†u basic: Tr·∫Øng, ƒêen, X√°m\n‚Ä¢ M√†u trendy: Navy, H·ªìng, Xanh d∆∞∆°ng\n‚Ä¢ M√†u seasonal: Cam, V√†ng, T√≠m\n‚Ä¢ M√†u limited: Theo collection m·ªõi\n\nB·∫°n th√≠ch m√†u n√†o nh·∫•t?`;
  }

  // X·ª≠ l√Ω ƒë·∫∑t h√†ng
  if (msg.includes("ƒë·∫∑t h√†ng") || msg.includes("mua") || msg.includes("order")) {
    return `ƒê·ªÉ ƒë·∫∑t h√†ng, b·∫°n c√≥ th·ªÉ:\n1. Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr√™n website\n2. ƒêi·ªÅn th√¥ng tin giao h√†ng\n3. Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n\n4. X√°c nh·∫≠n ƒë∆°n h√†ng\n\nHo·∫∑c li√™n h·ªá hotline 1900-1234 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·∫∑t h√†ng tr·ª±c ti·∫øp!`;
  }

  // X·ª≠ l√Ω tracking ƒë∆°n h√†ng
  if (msg.includes("ƒë∆°n h√†ng") || msg.includes("theo d√µi") || msg.includes("track")) {
    return `B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng b·∫±ng c√°ch:\n1. ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n\n2. V√†o m·ª•c "L·ªãch s·ª≠ ƒë∆°n h√†ng"\n3. Xem chi ti·∫øt v√† tr·∫°ng th√°i ƒë∆°n h√†ng\n\nHo·∫∑c cung c·∫•p m√£ ƒë∆°n h√†ng ƒë·ªÉ t√¥i h·ªó tr·ª£ tra c·ª©u!`;
  }

  // X·ª≠ l√Ω khuy·∫øn m√£i
  if (msg.includes("khuy·∫øn m√£i") || msg.includes("gi·∫£m gi√°") || msg.includes("sale")) {
    return `üéâ Khuy·∫øn m√£i HOT hi·ªán t·∫°i:\n${productInfo.discounts.map(d => `‚Ä¢ ${d.code}: ${d.description} (ƒë∆°n t·ª´ ${d.minOrder.toLocaleString('vi-VN')}ƒë)`).join('\n')}\n\n√Åp d·ª•ng m√£ t·∫°i trang gi·ªè h√†ng nh√©!`;
  }

  // Ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh th√¥ng minh h∆°n
  const responses = [
    `C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:\n‚Ä¢ Th√¥ng tin s·∫£n ph·∫©m v√† gi√° c·∫£\n‚Ä¢ T∆∞ v·∫•n size v√† ch·∫•t li·ªáu\n‚Ä¢ Ch√≠nh s√°ch giao h√†ng, thanh to√°n\n‚Ä¢ Khuy·∫øn m√£i v√† m√£ gi·∫£m gi√°\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨?`,
    `ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt nh·∫•t, b·∫°n c√≥ th·ªÉ:\nüìû G·ªçi hotline: 1900-1234\nüìß Email: support@shop.com\nüí¨ Chat tr·ª±c ti·∫øp t·∫°i ƒë√¢y\n\nT√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n!`,
    `T√¥i s·∫Ω k·∫øt n·ªëi b·∫°n v·ªõi team t∆∞ v·∫•n chuy√™n nghi·ªáp ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t. Trong l√∫c ch·ªù, b·∫°n c√≥ th·ªÉ xem th√™m s·∫£n ph·∫©m tr√™n website nh√©!`
  ];
  
  return responses[Math.floor(Math.random() * responses.length)];
};

export async function POST(req: Request) {
  try {
    const { message, context = [] }: ChatRequest = await req.json();

    if (!message || message.trim().length === 0) {
      return NextResponse.json({
        success: false,
        error: "Message is required"
      }, { status: 400 });
    }

    const response = generateSmartResponse(message, context);

    // Log chat for analytics (optional)
    console.log(`[CHAT] User: ${message}`);
    console.log(`[CHAT] Bot: ${response}`);

    return NextResponse.json({
      success: true,
      response,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error("Chat API Error:", error);
    return NextResponse.json({
      success: false,
      error: "Internal server error"
    }, { status: 500 });
  }
}

export async function GET(req: Request) {
  // Tr·∫£ v·ªÅ th√¥ng tin v·ªÅ bot
  return NextResponse.json({
    success: true,
    botInfo: {
      name: "AI H·ªó tr·ª£ Shop",
      version: "1.0.0",
      capabilities: [
        "T∆∞ v·∫•n s·∫£n ph·∫©m",
        "H·ªó tr·ª£ ƒë·∫∑t h√†ng",
        "Th√¥ng tin ch√≠nh s√°ch",
        "Khuy·∫øn m√£i v√† ∆∞u ƒë√£i"
      ],
      supportedLanguages: ["vi", "en"]
    }
  });
}
