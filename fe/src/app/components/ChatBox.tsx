'use client';
import { useState, useRef, useEffect } from 'react';
import { useNotification } from '@/contexts/NotificationContext';
import styles from './ChatBox.module.css';

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
}

const predefinedResponses: { [key: string]: string } = {
  'xin ch√†o': 'Xin ch√†o! T√¥i l√† AI h·ªó tr·ª£ kh√°ch h√†ng c·ªßa shop. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
  'hello': 'Xin ch√†o! T√¥i l√† AI h·ªó tr·ª£ kh√°ch h√†ng c·ªßa shop. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
  'hi': 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ s·∫£n ph·∫©m, ƒë∆°n h√†ng, v√† ch√≠nh s√°ch c·ªßa shop.',
  's·∫£n ph·∫©m': 'Ch√∫ng t√¥i c√≥ c√°c s·∫£n ph·∫©m √°o thun nam, n·ªØ, ph·ª• ki·ªán v√† set qu·∫ßn √°o. B·∫°n quan t√¢m ƒë·∫øn lo·∫°i s·∫£n ph·∫©m n√†o?',
  '√°o thun': 'Ch√∫ng t√¥i c√≥ nhi·ªÅu lo·∫°i √°o thun nam v√† n·ªØ v·ªõi gi√° t·ª´ 100.000 - 500.000 VNƒê. T·∫•t c·∫£ ƒë·ªÅu ch·∫•t l∆∞·ª£ng cao v√† thi·∫øt k·∫ø th·ªùi trang.',
  'gi√°': 'Gi√° s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i t·ª´ 100.000 - 500.000 VNƒê t√πy lo·∫°i. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt gi√° t·ª´ng s·∫£n ph·∫©m tr√™n trang web.',
  'giao h√†ng': 'Ch√∫ng t√¥i c√≥ 2 h√¨nh th·ª©c giao h√†ng: Giao h√†ng ti·∫øt ki·ªám (20.000 VNƒê) v√† Giao h√†ng nhanh (50.000 VNƒê). Th·ªùi gian giao h√†ng t·ª´ 2-5 ng√†y.',
  'thanh to√°n': 'Ch√∫ng t√¥i h·ªó tr·ª£ thanh to√°n khi nh·∫≠n h√†ng (COD), chuy·ªÉn kho·∫£n ng√¢n h√†ng, v√≠ Momo v√† th·∫ª t√≠n d·ª•ng.',
  'ƒë·ªïi tr·∫£': 'Ch√∫ng t√¥i h·ªó tr·ª£ ƒë·ªïi tr·∫£ trong v√≤ng 7 ng√†y v·ªõi s·∫£n ph·∫©m ch∆∞a s·ª≠ d·ª•ng v√† c√≤n nguy√™n tag.',
  'size': 'Ch√∫ng t√¥i c√≥ ƒë·ªß size t·ª´ S ƒë·∫øn XXL. B·∫°n c√≥ th·ªÉ tham kh·∫£o b·∫£ng size chi ti·∫øt trong m√¥ t·∫£ s·∫£n ph·∫©m.',
  'li√™n h·ªá': 'B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua hotline: 1900-1234, email: support@shop.com ho·∫∑c chat tr·ª±c ti·∫øp t·∫°i ƒë√¢y.',
  'khuy·∫øn m√£i': 'Ch√∫ng t√¥i th∆∞·ªùng xuy√™n c√≥ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i. Hi·ªán t·∫°i c√≥ m√£ gi·∫£m gi√° SAVE10 (10%), SAVE50 (50.000ƒë), FREESHIP (mi·ªÖn ph√≠ ship).',
  'm√£ gi·∫£m gi√°': 'C√°c m√£ gi·∫£m gi√° hi·ªán c√≥: SAVE10 (gi·∫£m 10%), SAVE50 (gi·∫£m 50.000ƒë), FREESHIP (mi·ªÖn ph√≠ ship). √Åp d·ª•ng t·∫°i trang gi·ªè h√†ng.',
  'bye': 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫c b·∫°n mua s·∫Øm vui v·∫ª. H·∫πn g·∫∑p l·∫°i!',
  't·∫°m bi·ªát': 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫c b·∫°n mua s·∫Øm vui v·∫ª. H·∫πn g·∫∑p l·∫°i!',
  'c·∫£m ∆°n': 'Kh√¥ng c√≥ g√¨! T√¥i r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. B·∫°n c√≥ c·∫ßn h·ªó tr·ª£ g√¨ th√™m kh√¥ng?'
};

const quickReplies = [
  'S·∫£n ph·∫©m n·ªïi b·∫≠t',
  'Ch√≠nh s√°ch giao h√†ng', 
  'C√°ch thanh to√°n',
  'ƒê·ªïi tr·∫£ h√†ng',
  'M√£ gi·∫£m gi√°',
  'Li√™n h·ªá h·ªó tr·ª£'
];

export default function ChatBox() {
  const { success } = useNotification();
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  // Kh·ªüi t·∫°o messages v√† load t·ª´ localStorage
  useEffect(() => {
    const savedMessages = localStorage.getItem('chatMessages');
    if (savedMessages) {
      try {
        const parsed = JSON.parse(savedMessages);
        // ƒê·∫£m b·∫£o timestamp l√† Date object
        const messagesWithDateTimestamp = parsed.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        }));
        setMessages(messagesWithDateTimestamp);
      } catch (error) {
        console.error('Error loading chat history:', error);
        setDefaultWelcomeMessage();
      }
    } else {
      setDefaultWelcomeMessage();
    }
  }, []);

  // L∆∞u messages v√†o localStorage khi thay ƒë·ªïi
  useEffect(() => {
    if (messages.length > 0) {
      localStorage.setItem('chatMessages', JSON.stringify(messages));
    }
  }, [messages]);

  const setDefaultWelcomeMessage = () => {
    setMessages([{
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† AI h·ªó tr·ª£ kh√°ch h√†ng. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? üòä',
      isBot: true,
      timestamp: new Date()
    }]);
  };

  const clearChatHistory = () => {
    localStorage.removeItem('chatMessages');
    setDefaultWelcomeMessage();
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  const generateResponse = async (userMessage: string): Promise<string> => {
    try {
      // G·ªçi API chat ƒë·ªÉ c√≥ response th√¥ng minh h∆°n
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: userMessage,
          context: messages.slice(-5).map(m => m.text) // G·ª≠i 5 tin nh·∫Øn g·∫ßn nh·∫•t l√†m context
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          return data.response;
        }
      }
    } catch (error) {
      console.error('Chat API Error:', error);
    }

    // Fallback v·ªÅ response c≈© n·∫øu API l·ªói
    const lowerMessage = userMessage.toLowerCase();
    
    // T√¨m response ph√π h·ª£p
    for (const [key, response] of Object.entries(predefinedResponses)) {
      if (lowerMessage.includes(key)) {
        return response;
      }
    }

    // Response m·∫∑c ƒë·ªãnh
    const defaultResponses = [
      'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i ƒëang t√¨m hi·ªÉu th√¥ng tin n√†y. B·∫°n c√≥ th·ªÉ li√™n h·ªá hotline 1900-1234 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp.',
      'ƒê√¢y l√† m·ªôt c√¢u h·ªèi hay! ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt, b·∫°n c√≥ th·ªÉ nh·∫Øn tin cho ch√∫ng t√¥i ho·∫∑c g·ªçi hotline 1900-1234.',
      'T√¥i s·∫Ω chuy·ªÉn y√™u c·∫ßu n√†y cho team h·ªó tr·ª£. Trong th·ªùi gian ch·ªù, b·∫°n c√≥ th·ªÉ xem th√™m th√¥ng tin tr√™n website c·ªßa ch√∫ng t√¥i.'
    ];
    
    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
  };
  const sendMessage = async (text: string) => {
    if (!text.trim()) return;

    // Th√™m tin nh·∫Øn c·ªßa user
    const userMessage: Message = {
      id: Date.now().toString(),
      text: text.trim(),
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate typing delay v√† g·ªçi API
    setTimeout(async () => {
      try {
        const responseText = await generateResponse(text);
        const botResponse: Message = {
          id: (Date.now() + 1).toString(),
          text: responseText,
          isBot: true,
          timestamp: new Date()
        };

        setMessages(prev => [...prev, botResponse]);
      } catch (error) {
        console.error('Error generating response:', error);
        const errorResponse: Message = {
          id: (Date.now() + 1).toString(),
          text: 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá hotline 1900-1234.',
          isBot: true,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, errorResponse]);
      } finally {
        setIsTyping(false);
      }
    }, 1000 + Math.random() * 1000);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    sendMessage(inputValue);
  };
  const handleQuickReply = (reply: string) => {
    let message = '';
    switch(reply) {
      case 'S·∫£n ph·∫©m n·ªïi b·∫≠t':
        message = 'Cho t√¥i xem s·∫£n ph·∫©m n·ªïi b·∫≠t nh·∫•t c·ªßa shop';
        break;
      case 'Ch√≠nh s√°ch giao h√†ng':
        message = 'Cho t√¥i bi·∫øt v·ªÅ ch√≠nh s√°ch giao h√†ng';
        break;
      case 'C√°ch thanh to√°n':
        message = 'Shop h·ªó tr·ª£ nh·ªØng h√¨nh th·ª©c thanh to√°n n√†o?';
        break;
      case 'ƒê·ªïi tr·∫£ h√†ng':
        message = 'T√¥i mu·ªën bi·∫øt v·ªÅ ch√≠nh s√°ch ƒë·ªïi tr·∫£';
        break;
      case 'M√£ gi·∫£m gi√°':
        message = 'Hi·ªán t·∫°i c√≥ m√£ gi·∫£m gi√° n√†o kh√¥ng?';
        break;
      case 'Li√™n h·ªá h·ªó tr·ª£':
        message = 'T√¥i mu·ªën li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£';
        break;
      default:
        message = reply;
    }
    sendMessage(message);
  };

  // Detect links v√† t·∫°o action buttons
  const renderMessageWithActions = (text: string) => {
    const lines = text.split('\n');
    return (
      <div>
        {lines.map((line, index) => (
          <div key={index}>
            {line}
            {index < lines.length - 1 && <br />}
          </div>
        ))}
        
        {/* Action buttons cho m·ªôt s·ªë response ƒë·∫∑c bi·ªát */}
        {text.includes('catalog') || text.includes('s·∫£n ph·∫©m') && (
          <div style={{ marginTop: '8px', display: 'flex', gap: '6px', flexWrap: 'wrap' }}>
            <button
              className={styles.actionButton}
              onClick={() => window.open('/products', '_blank')}
            >
              üõçÔ∏è Xem s·∫£n ph·∫©m
            </button>
          </div>
        )}
        
        {text.includes('gi·ªè h√†ng') && (
          <div style={{ marginTop: '8px', display: 'flex', gap: '6px', flexWrap: 'wrap' }}>
            <button
              className={styles.actionButton}
              onClick={() => window.open('/cart', '_blank')}
            >
              üõí Xem gi·ªè h√†ng
            </button>
          </div>
        )}
        
        {text.includes('m√£ gi·∫£m gi√°') || text.includes('SAVE') && (
          <div style={{ marginTop: '8px', display: 'flex', gap: '6px', flexWrap: 'wrap' }}>
            <button
              className={styles.actionButton}
              onClick={() => {
                navigator.clipboard.writeText('SAVE10');
                success('ƒê√£ copy m√£!', 'M√£ gi·∫£m gi√° SAVE10 ƒë√£ ƒë∆∞·ª£c sao ch√©p');
              }}
            >
              üìã Copy SAVE10
            </button>
            <button
              className={styles.actionButton}
              onClick={() => {
                navigator.clipboard.writeText('FREESHIP');
                success('ƒê√£ copy m√£!', 'M√£ mi·ªÖn ph√≠ ship FREESHIP ƒë√£ ƒë∆∞·ª£c sao ch√©p');
              }}
            >
              üìã Copy FREESHIP
            </button>
          </div>
        )}
      </div>
    );
  };

  return (
    <>
      {/* Chat Button */}
      <button
        className={styles.chatButton}
        onClick={() => setIsOpen(!isOpen)}
        title="Chat h·ªó tr·ª£"
      >
        {isOpen ? '‚úï' : 'üí¨'}
      </button>

      {/* Chat Box */}
      {isOpen && (
        <div className={styles.chatBox}>          {/* Header */}
          <div className={styles.chatHeader}>
            <div className={styles.headerInfo}>
              <div className={styles.avatar}>ü§ñ</div>
              <div>
                <div className={styles.botName}>AI H·ªó tr·ª£</div>
                <div className={styles.status}>ƒêang online</div>
              </div>
            </div>
            <div style={{ display: 'flex', gap: '8px' }}>
              <button
                className={styles.clearButton}
                onClick={clearChatHistory}
                title="X√≥a l·ªãch s·ª≠ chat"
              >
                üóëÔ∏è
              </button>
              <button
                className={styles.closeButton}
                onClick={() => setIsOpen(false)}
              >
                ‚úï
              </button>
            </div>
          </div>

          {/* Messages */}
          <div className={styles.chatMessages}>
            {messages.map((message) => (
              <div
                key={message.id}
                className={`${styles.message} ${
                  message.isBot ? styles.botMessage : styles.userMessage
                }`}
              >
                {message.isBot && (
                  <div className={styles.messageAvatar}>ü§ñ</div>
                )}
                <div className={styles.messageContent}>
                  <div className={styles.messageText}>
                    {renderMessageWithActions(message.text)}
                  </div>                  <div className={styles.messageTime}>
                    {new Date(message.timestamp).toLocaleTimeString('vi-VN', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className={`${styles.message} ${styles.botMessage}`}>
                <div className={styles.messageAvatar}>ü§ñ</div>
                <div className={styles.messageContent}>
                  <div className={styles.typingIndicator}>
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Replies */}
          {messages.length === 1 && (
            <div className={styles.quickReplies}>
              <div className={styles.quickRepliesTitle}>C√¢u h·ªèi th∆∞·ªùng g·∫∑p:</div>
              <div className={styles.quickRepliesButtons}>
                {quickReplies.map((reply, index) => (
                  <button
                    key={index}
                    className={styles.quickReplyButton}
                    onClick={() => handleQuickReply(reply)}
                  >
                    {reply}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <form className={styles.chatInput} onSubmit={handleSubmit}>
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              className={styles.input}
              disabled={isTyping}
            />
            <button
              type="submit"
              className={styles.sendButton}
              disabled={!inputValue.trim() || isTyping}
            >
              ‚û§
            </button>
          </form>
        </div>
      )}
    </>
  );
}
